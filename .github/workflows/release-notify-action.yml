name: Release Branch Notification

on:
  create:
    branches:
      - release/* # Trigger workflow when a release branch is created

permissions:
  contents: read
  pull-requests: read

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Fetch and process emails from PR commits
      - name: Fetch and process PR commit emails
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch merged pull requests into main branch
          prs=$(gh pr list --state merged --base main --json number)
          
          # Initialize an empty recipients list
          recipients=""
          # Ensure prs is not empty
          if [[ -z "$prs" || "$prs" == "[]" ]]; then
             echo "No merged pull requests found."
             exit 0
          fi
          echo "PRS : $prs"
          # Loop through each merged PR
           for pr in $(echo "$prs" | jq -c '.[]'); do
            pr_number=$(echo "$pr" | jq -r '.number')
            
            # Fetch commits for the PR
            commits=$(gh pr view "$pr_number" --json commits | jq -c '.[]')
            echo "COMMITS : $commits"
             for commit in $(echo "$commits" | jq -r '.[] | @base64'); do
              
              # Decode commit details
               commit_decoded=$(echo "$commit" | base64 --decode)
               echo "commit_decoded : $commit_decoded"
              
              # echo "COMMIT : $commit"
               commit_authors=$(echo "$commit_decoded" | jq -r '.authors')
               commit_email=$(echo "$commit_decoded" | jq -r '.authors[0].email')
               echo "commit_email : $commit_email"
               MESSAGE=$(echo "$commit_decoded" | jq -r '.messageHeadline')
               echo "commit_message : $MESSAGE"
               
              # Extract JIRA number
               if [[ $MESSAGE =~ \[([A-Z]+-[0-9]+)\] ]]; then
                 JIRA_NUMBER=${BASH_REMATCH[1]}
                 echo "Extracted Message value: $JIRA_NUMBER"
               else
                 echo "No match found in message field."
               fi
               JIRA_RESPONSE=$(cat "$JIRA_NUMBER.json")
               echo "JIRA_RESPONSE Value  : $JIRA_RESPONSE"
      
              # Extract Status
               STATUS=$(echo "$JIRA_RESPONSE" | jq -r '.fields.status.name')
               echo "Status: $STATUS"
      
              # Extract Components (as a comma-separated string)
               COMPONENTS=$(echo "$JIRA_RESPONSE" | jq -r '.fields.components | join(", ")')
               echo "Component Names: $COMPONENTS"
      
              # Extract Fix Versions (as a comma-separated string)
               FIX_VERSIONS=$(echo "$JIRA_RESPONSE" | jq -r '.fields.fixVersions | join(", ")')
               echo "Fix Versions: $FIX_VERSIONS"

          # Append the email to the recipients list (avoid duplicates)
            if [[ -n "$commit_email" && ! ",$recipients," == *",$commit_email,"* ]]; then
                if [ -z "$recipients" ]; then
                  recipients="$commit_email"
                else
                  recipients="$recipients,$commit_email"
                fi
            fi
            done
          done
          # Save the recipients list to an environment variable
          echo "RECIPIENTS=$recipients" >> $GITHUB_ENV

          # Generate HTML email content
          EMAIL_CONTENT=$(cat <<EOF
          <html>
          <head>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; }
              .container { padding: 20px; background-color: #f4f4f9; border-radius: 5px; border: 1px solid #ddd; }
              .header { font-weight: bold; color: #444; font-size: 18px; margin-bottom: 10px; }
              .details { margin: 10px 0; }
              .footer { font-size: 14px; color: #888; margin-top: 20px; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">New Release Branch Notification</div>
              <div class="details">
                <p><strong>Branch Name:</strong> ${{ github.ref_name }}</p>
                <p><strong>Commit Authors:</strong> $recipients</p>
                <p><strong>JIRA Number:</strong> $JIRA_NUMBER</p>
                <p><strong>Status:</strong> $STATUS</p>
                <p><strong>Component Names:</strong> $COMPONENTS</p>
                <p><strong>Fix Versions:</strong> $FIX_VERSIONS</p>
              </div>
              <div class="footer">
                This is an automated notification email. Please do not reply.
              </div>
            </div>
          </body>
          </html>
          EOF )
          
          echo "$EMAIL_CONTENT" > email.html
          echo "::set-output name=email_content::$(cat email.html)"

      # Step 3: Send email notifications
      - name: Send email notifications
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "New Release Branch Created: ${{ github.ref_name }}"
          body: ${{ steps.generate_email.outputs.email_content }}
          content_type: text/html
          to: ${{ env.RECIPIENTS }} # Dynamically set the recipient list
          from: "thirupanyala2k2@gmail.com"
